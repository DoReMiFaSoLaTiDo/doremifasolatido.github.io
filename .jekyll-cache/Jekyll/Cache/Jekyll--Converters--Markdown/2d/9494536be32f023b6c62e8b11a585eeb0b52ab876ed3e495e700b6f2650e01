I"­<p>I seem to be late to the Event Sourcing architecture party, like several years late.:gasp: I initially looked into it sometime ago, but didnâ€™t have any immediate application use-case for it, so filed it away until recently when building an enterprise Rails application that tracks daily production activities, and also income and expense (Accounts, yo!).
Â </p>
<h3 id="enter-event-sourcing">Enter Event Sourcingâ€¦</h3>
<p>In its basic form, Event Sourcing revolves around aggregates â€“ a body of interconnected entities (models) which together complete a task. The classic example is that of an Order: select order items, make payment, order shipped, order delivered. These activities (or events) leave a trail of interesting data points both at the merchant and buyer ends. The aggregate here is composed of <code class="language-plaintext highlighter-rouge">:order</code>, <code class="language-plaintext highlighter-rouge">:payment</code>, <code class="language-plaintext highlighter-rouge">:shipment</code> and <code class="language-plaintext highlighter-rouge">:item</code> entities, with <code class="language-plaintext highlighter-rouge">:order</code> serving as aggregate_root</p>
:ET